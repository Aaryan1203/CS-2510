import javalib.worldimages.*;  
import javalib.worldcanvas.*;   
import javalib.funworld.*;
import java.awt.Color;
import tester.Tester;

//An interface that represents mobile phones
interface IMobile {

  //computes the total weight of the mobile
  int totalWeight();

  //computes the height of the mobile
  int totalHeight();

  //determines if a mobile is balanced
  boolean isBalanced();

  //combines this balanced mobile with the given balanced mobile and produces a new mobile
  IMobile buildMobile(IMobile other, int length, int totalLength);

  //computes the current width of a mobile
  int curWidth();

  //computes the width of the left side of the mobile
  int curWidthLeft();

  //computes the width of the right side of the mobile
  int curWidthRight();

  //produces the image of this mobile 
  WorldImage drawMobile();

}

//a simple mobile phone
class Simple implements IMobile {
  int length;
  int weight;
  Color color;

  Simple(int length, int weight, Color color) {
    this.length = length;
    this.weight = weight;
    this.color = color;
  }

  /*
   * Fields:
   *  this.length ... int
   *  this.weight ... int
   *  this.color ... Color
   * Methods:
   *  this.totalWeight() ... int
   *  this.totalHeight() ... int
   *  this.isBalanced() ... boolean
   *  this.buildMobile(IMobile, int, int) ... IMobile
   *  this.curWidth() ... int
   *  this.curWidthLeft() ... int
   *  this.curWidthRight() ... int
   * Methods of fields:
   * 
   */

  //computes total weight of the simple mobile
  public int totalWeight() {
    return this.weight;
  }

  //computes the total height of the simple mobile
  public int totalHeight() {
    return this.length + this.weight / 10;
  }

  //determines if a simple mobile is balanced
  public boolean isBalanced() {
    return true;
  }

  //combines this simple mobile with the given balanced mobile and produces a new mobile
  public IMobile buildMobile(IMobile other, int length, int totalLength) {

    /*
     * Fields: None
     * Methods: 
     *  other.totalWeight() ... int
     *  other.totalHeight() ... int
     *  other.isBalanced() ... boolean
     *  other.buildMobile(IMobile, int, int) ... IMobile
     *  other.curWidth() ... int
     *  other.curWidthLeft() ... int
     *  other.curWidthRight() ... int
     *  other.drawMobile() ... WorldImage
     * Fields of Methods: None
     */

    int r = (this.totalWeight() * totalLength)
        / (this.totalWeight() + other.totalWeight());
    int l = totalLength - r;
    return new Complex(length, l, r, this, other);
  } 

  //computes the current width of a simple mobile
  public int curWidth() {
    if (this.weight % 10 == 0) {
      return this.weight / 10;
    }
    else {
      return this.weight / 10 + 1;
    }
  }

  //computes the width of the left side of the mobile
  public int curWidthLeft() {
    return this.curWidth() / 2;
  }

  //computes the width of the right side of the mobile
  public int curWidthRight() {
    return this.curWidth() / 2;
  }

  //produces the image of this simple mobile 
  public WorldImage drawMobile() {

    LineImage line = new LineImage(new Posn(0, this.length * 10), Color.black);

    RectangleImage rect = new RectangleImage(this.weight, 
        this.weight, OutlineMode.SOLID, this.color);

    return new VisiblePinholeImage((new AboveImage(line, rect))
        .movePinhole(0, -this.totalHeight() * 5));
  }

}

//a complex mobile phone
class Complex implements IMobile {
  int length;
  int leftside;
  int rightside;
  IMobile left;
  IMobile right;

  Complex(int length, int leftside, int rightside, IMobile left, IMobile right) {
    this.length = length;
    this.leftside = leftside;
    this.rightside = rightside;
    this.left = left;
    this.right = right;
  }

  /*
   * Fields:
   *  this.length ... int
   *  this.leftside ... int
   *  this.rightside ... int
   *  this.left ... IMobile
   *  this.right ... IMobile
   * Methods:
   *  this.totalWeight() ... int
   *  this.totalHeight() ... int
   *  this.isBalanced() ... boolean
   *  this.buildMobile(IMobile, int, int) ... IMobile
   *  this.curWidth() ... int
   *  this.curWidthLeft() ... int
   *  this.curWidthRight() ... int
   *  this.drawMobile() ... WorldImage
   * Methods of fields:
   *  this.right.totalWeight() ... int
   *  this.left.totalWeight() ... int
   *  this.right.totalHeight() ... int
   *  this.left.totalHeight() ... int
   *  this.right.isBalanced() ... boolean
   *  this.left.isBalanced() ... boolean
   *  this.right.buildMobile(IMobile, int, int) ... IMobile
   *  this.left.buildMobile(IMobile, int, int) ... IMobile
   *  this.right.curWidth() ... int
   *  this.left.curWidth() ... int
   *  this.right.curWidthLeft() ... int
   *  this.left.curWidthLeft ... int
   *  this.right.curWidthRight() ... int
   *  this.left.curWidthRight() ... int
   *  this.right.drawMobile() ... WorldImage
   *  this.left.drawMobile() ... WorldImage
   */

  //computes total weight of the complex mobile
  public int totalWeight() {
    return this.left.totalWeight() + this.right.totalWeight();
  }

  //computes the total height of the complex mobile
  public int totalHeight() {
    return this.length + Math.max(this.left.totalHeight(), this.right.totalHeight());
  }

  //determines if a complex mobile is balanced
  public boolean isBalanced() {
    return (this.leftside * this.left.totalWeight()) == this.rightside * this.right.totalWeight();
  }

  //combines this complex mobile with the given balanced mobile and produces a new mobile
  public IMobile buildMobile(IMobile other, int length, int totalLength) {

    /*
     * Fields: None
     * Methods: 
     *  other.totalWeight() ... int
     *  other.totalHeight() ... int
     *  other.isBalanced() ... boolean
     *  other.buildMobile(IMobile, int, int) ... IMobile
     *  other.curWidth() ... int
     *  other.curWidthLeft() ... int
     *  other.curWidthRight() ... int
     *  other.drawMobile() ... WorldImage
     * Fields of Methods: None
     */

    int r = (this.totalWeight() * totalLength) 
        / (this.totalWeight() + other.totalWeight());
    int l = totalLength - r;
    return new Complex(length, l, r, this, other);
  }

  //computes the current width of a complex mobile
  public int curWidth() {
    return this.curWidthLeft() + this.curWidthRight();
  }

  //Total width on the left side
  public int curWidthLeft() {
    return Math.max(this.leftside + this.left.curWidthLeft(), 
        this.right.curWidthLeft() - this.rightside);
  }

  //Total width on the right side
  public int curWidthRight() {
    return Math.max(this.rightside + this.right.curWidthRight(), 
        this.left.curWidthRight() - this.leftside);
  }

  //produces the image of this complex mobile 
  public WorldImage drawMobile() {
    WorldImage left = new LineImage(new Posn(-this.leftside * 10, 0), Color.BLACK);

    WorldImage vertical = new VisiblePinholeImage(new LineImage(new Posn(0, this.length * 10), 
        Color.BLACK).movePinhole(0, this.length * 5));

    WorldImage right = new LineImage(new Posn(this.rightside * 10, 0), Color.BLACK);

    WorldImage leftImage = new VisiblePinholeImage(this.left.drawMobile())
        .movePinhole(this.leftside * 10, 0);

    WorldImage rightImage = new VisiblePinholeImage(this.right.drawMobile())
        .movePinhole(-this.rightside * 10, 0);

    WorldImage lines = new VisiblePinholeImage(new OverlayImage(left.movePinhole(
        this.rightside * 5,  0), right.movePinhole(-this.leftside * 5, 0)));

    WorldImage allLines = new VisiblePinholeImage(new OverlayImage(lines, vertical));

    WorldImage total = new OverlayImage(allLines, new OverlayImage(leftImage, rightImage));

    return total; 
    /*
    return new AboveAlignImage (AlignModeX.RIGHT,

        new BesideAlignImage(AlignModeY.TOP, left, len, right).movePinholeTo
        (new Posn(((this.leftside * 10 - this.rightside * 10)), 0)), 
        new OverlayOffsetAlign(AlignModeX.LEFT, AlignModeY.TOP, this.left.drawMobile()
        .movePinhole(0, 0), 
            this.leftside + this.rightside, 0.0, this.right.drawMobile().movePinhole(0, 0)));
     */
  }

}

//examples of IMobiles
class ExamplesMobiles {

  //simple examples for example complex
  IMobile thirtySixBlue = new Simple(1, 36, Color.blue);
  IMobile twelveRed = new Simple(1, 12, Color.red);
  IMobile thirySixRed = new Simple(2, 36, Color.red);
  IMobile sixtyGreen = new Simple(1, 60, Color.green);

  //complex examples for example complex
  IMobile complexOne = new Complex(2, 5, 3, this.thirySixRed, this.sixtyGreen);
  IMobile complexTwo = new Complex(2, 8, 1, this.twelveRed, this.complexOne);

  //complex examples for complex3
  IMobile complexThree = new Complex(3, 2, 3, this.complexOne, this.complexTwo);
  IMobile complexFour = new Complex(4, 5, 6, this.complexThree, this.complexTwo);

  //given examples
  IMobile exampleSimple = new Simple(2, 20, Color.blue);
  IMobile exampleComplex = new Complex(1, 9, 3, this.thirtySixBlue, this.complexTwo);
  IMobile example3 = new Complex(2, 5, 10, this.complexFour, this.complexThree);


  //tests the totalWeight method
  boolean testWeight(Tester t) {
    return t.checkExpect(this.exampleComplex.totalWeight(), 144)
        && t.checkExpect(this.example3.totalWeight(), 516)
        && t.checkExpect(this.twelveRed.totalWeight(), 12)
        && t.checkExpect(this.complexFour.totalWeight(), 312);
  }

  //tests the totalHeight method
  boolean testHeight(Tester t) {
    return t.checkExpect(this.exampleComplex.totalHeight(), 12)
        && t.checkExpect(this.exampleSimple.totalHeight(), 4)
        && t.checkExpect(this.example3.totalHeight(), 20)
        && t.checkExpect(this.complexThree.totalHeight(), 14);
  }

  //tests the isBalanced method
  boolean testBalanced(Tester t) {
    return t.checkExpect(this.exampleComplex.isBalanced(), true)
        && t.checkExpect(this.twelveRed.isBalanced(), true)
        && t.checkExpect(this.example3.isBalanced(), false)
        && t.checkExpect(this.complexFour.isBalanced(), false);
  }

  //tests the buildMobile method
  boolean testBuild(Tester t) {
    return t.checkExpect(this.thirtySixBlue.buildMobile(this.twelveRed, 3, 8), 
        new Complex(3, 2, 6, this.thirtySixBlue, this.twelveRed))
        && t.checkExpect(this.sixtyGreen.buildMobile(this.complexOne, 2, 13),
            new Complex(2, 8, 5, this.sixtyGreen, this.complexOne))
        && t.checkExpect(this.exampleComplex.buildMobile(this.example3, 4, 10),
            new Complex(4, 8, 2, this.exampleComplex, this.example3))
        && t.checkExpect(this.exampleSimple.buildMobile(this.thirtySixBlue, 6, 12),
            new Complex(6, 8, 4, this.exampleSimple, this.thirtySixBlue));
  }

  //tests the curWidth method
  boolean testWidth(Tester t) {
    return t.checkExpect(this.twelveRed.curWidth(), 2)
        && t.checkExpect(this.thirySixRed.curWidth(), 4)
        && t.checkExpect(this.sixtyGreen.curWidth(), 6)
        && t.checkExpect(this.complexOne.curWidth(), 13)
        && t.checkExpect(this.exampleComplex.curWidth(), 21);
  }

  //tests the curWidthLeft method
  boolean testWidthLeft(Tester t) {
    return t.checkExpect(this.twelveRed.curWidthLeft(), 1)
        && t.checkExpect(this.sixtyGreen.curWidthLeft(), 3)
        && t.checkExpect(this.complexFour.curWidthLeft(), 14)
        && t.checkExpect(this.exampleComplex.curWidthLeft(), 11);
  }

  //tests the curWidthRight method
  boolean testWidthRight(Tester t) {
    return t.checkExpect(this.twelveRed.curWidthLeft(), 1)
        && t.checkExpect(this.sixtyGreen.curWidthLeft(), 3)
        && t.checkExpect(this.complexFour.curWidthLeft(), 14)
        && t.checkExpect(this.exampleComplex.curWidthLeft(), 11);
  }

  //tests the drawMobile method
  boolean testDrawMobile(Tester t) {

    WorldCanvas c = new WorldCanvas(500, 500);
    WorldScene s = new WorldScene(500, 500);

    return c.drawScene(s.placeImageXY(this.exampleComplex.drawMobile(), 250, 250))
        && c.show();
  }
  
  //tests the drawMobile method
  boolean testDrawMobilet(Tester t) {
    return t.checkExpect(this.exampleSimple.drawMobile(), new VisiblePinholeImage((
        new AboveImage((new LineImage(new Posn(0, 20), Color.black)), 
            (new RectangleImage(20,
                20, OutlineMode.SOLID, Color.BLUE))))
        .movePinhole(0, -20 )));
  }

}



